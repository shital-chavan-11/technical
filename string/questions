ðŸ”¹ Basic String Problems
Reverse a String â€“ Given a string, return its reverse. *(Example: "hello" â†’ "olleh")

Check Palindrome â€“ Determine if a string reads the same forward and backward. *(Example: "madam" â†’ True)

Count Vowels and Consonants â€“ Count the number of vowels (a, e, i, o, u) and consonants in a given string.

Remove Duplicates â€“ Given a string, remove duplicate characters while maintaining order. *(Example: "programming" â†’ "progamin")

Find the Most Frequent Character â€“ Find the character that appears most frequently in a string. *(Example: "banana" â†’ 'a')

Check Anagram â€“ Given two strings, check if they are anagrams (contain the same characters in any order). *(Example: "listen" & "silent" â†’ True)

First Non-Repeating Character â€“ Find the first character that does not repeat in a string. *(Example: "aabbccde" â†’ 'd')

Count Words in a String â€“ Given a sentence, count the number of words. *(Example: "Hello world" â†’ 2)

Remove Spaces from a String â€“ Remove all spaces from a given string. *(Example: "I love coding" â†’ "Ilovecoding")

Capitalize First Letter of Each Word â€“ Convert "hello world" to "Hello World"

ðŸ”¹ Intermediate String Problems
Valid Parentheses â€“ Check if a string with (){}[] is balanced.

Check if Two Strings are Rotations â€“ Given "abcde" and "deabc", return True if one is a rotation of the other.

Find the Longest Word in a Sentence â€“ Given "Coding is fun", return "Coding".

Count the Frequency of Each Character â€“ Given "hello", output { 'h':1, 'e':1, 'l':2, 'o':1 }.

Replace a Character in a String â€“ Replace all occurrences of 'a' with '@' in "banana".

Reverse Each Word in a Sentence â€“ Convert "I love Python" to "I evol nohtyP".

Compress a String â€“ "aaabbc" â†’ "a3b2c1" (basic Run-Length Encoding).

Check if a String Contains Only Digits â€“ "12345" â†’ True, "12a34" â†’ False.

Check for Pangram â€“ A pangram contains every letter of the alphabet at least once. "The quick brown fox jumps over the lazy dog" â†’ True.

Remove All Duplicates from a Sentence â€“ Convert "I am am learning learning Python" to "I am learning Python".

ðŸ”¹ Advanced String Problems
Find All Permutations of a String â€“ Given "abc", generate ["abc", "acb", "bac", "bca", "cab", "cba"].

Longest Common Prefix â€“ Given ["flower", "flow", "flight"], return "fl".

Check if One String is a Subsequence of Another â€“ "ace" is a subsequence of "abcde" (aâ†’câ†’e).

Find the Longest Palindromic Substring â€“ Given "babad", return "bab" or "aba".

Minimum Steps to Make Two Strings Anagram â€“ Convert "aba" to "cba" in minimum steps.

Find the Smallest Window Containing All Characters of Another String â€“ Find the smallest substring in "ADOBECODEBANC" that contains all characters of "ABC".

Decode a Run-Length Encoded String â€“ Convert "a3b2c1" back to "aaabbc".

Group Anagrams â€“ Given ["eat", "tea", "tan", "ate", "nat", "bat"], group them: [["eat","tea","ate"], ["tan","nat"], ["bat"]].

Remove Adjacent Duplicates Recursively â€“ "aabbac" â†’ "c".

Check if a String Follows a Given Pattern â€“ "abab" and ["cat", "dog", "cat", "dog"] â†’ True, "abba" and ["cat", "dog", "dog", "cat"] â†’ False.

ðŸ”¥ Challenge Problems
Zigzag Conversion â€“ Given "PAYPALISHIRING" and 3 rows, convert it to "PAHNAPLSIIGYIR".

Implement strstr() (Substring Search) â€“ Find the index of "needle" in "haystack".

Roman to Integer Conversion â€“ Convert "IX" to 9, "LVIII" to 58.

Multiply Two Large Numbers as Strings â€“ Multiply "123" Ã— "456" without using int().

Find All Possible Word Breaks â€“ Given "catsanddog" and dictionary ["cat", "cats", "and", "sand", "dog"], return ["cat sand dog", "cats and dog"].

Print All Subsequences of a String â€“ Given "abc", output ["a", "b", "c", "ab", "ac", "bc", "abc"].

Find the Shortest Palindrome by Adding Characters â€“ Convert "abcd" to "dcbabcd".

Find the Longest Substring Without Repeating Characters â€“ "abcabcbb" â†’ "abc" (length 3).

Check if Two Strings are K-Anagrams â€“ "anagram" and "grammar" with k=2 â†’ True.

Find All Palindromic Partitions â€“ Given "aab", return ["aa", "b"], ["a", "a", "b"].